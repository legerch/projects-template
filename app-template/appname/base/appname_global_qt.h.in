#ifndef APPNAME_GLOBAL_H
#define APPNAME_GLOBAL_H

/*!
 * \file appname_global.h
 *
 * \note
 * Based on <a href="https://github.com/legerch/projects-template">Projects template repository</a>.
 * Template file version: 2025-07-24
 */

#include <QtGlobal>

/**********************************
 * Application informations
 *********************************/
#define APPNAME_INFO_ID     "@PROJECT_NAME@"
#define APPNAME_INFO_NAME   "@PRJ_READABLE_NAME@"

/**********************************
 * Version management
 *********************************/

/*!
 * \brief Use to perform compilation version comparaisons
 * \details
 * For example:
 * \code{.cpp}
 * #if APPNAME_VERSION >= APPNAME_VERSION_ENCODE(1,0,0)
 *     // Do stuff for version 1.0.0 or higher
 * #else
 *     // Do stuff for version 0.0.x
 * #endif
 * \endcode
 */
#define APPNAME_VERSION_ENCODE(major, minor, path)    ((major) * 10000 + (minor) * 100 + (patch))

#define APPNAME_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
#define APPNAME_VERSION_MINOR @PROJECT_VERSION_MINOR@
#define APPNAME_VERSION_PATCH @PROJECT_VERSION_PATCH@
#define APPNAME_VERSION       APPNAME_VERSION_ENCODE(APPNAME_VERSION_MAJOR, APPNAME_VERSION_MINOR, APPNAME_VERSION_PATCH)
#define APPNAME_VERSION_STR   "@PROJECT_VERSION@"

/*!
 * \cond INTERNAL
 */

/**********************************
 * Deprecations warnings
 *********************************/
#define APPNAME_DEPREC              [[deprecated]]          /**< Use to mark a method as deprecated. \n\code{.cpp}APPNAME_DEPREC void myOldFct(); \endcode */
#define APPNAME_DEPREC_X(reason)    [[deprecated(reason)]] 	/**< Use to mark a method as deprecated and specify a reason. \n\code{.cpp}APPNAME_DEPREC_X("Use myNewFct() instead") void myOldFunc(); \endcode */

/**********************************
 * Custom macros used to detect custom
 * built-in functions
 * Sources:
 * - MSVC: No equivalent
 * - GCC: https://gcc.gnu.org/onlinedocs/gcc-13.2.0/cpp/_005f_005fhas_005fbuiltin.html
 * - Clang: https://clang.llvm.org/docs/LanguageExtensions.html#has-builtin
 *********************************/
#if defined(__GNUC__) || defined(__clang__)
#   define APPNAME_BUILTIN(x)  __has_builtin(x)
#else
#   define APPNAME_BUILTIN(x)  0
#endif

/**********************************
 * Custom macros in order to
 * not trigger warning on expected
 * behaviour
 *********************************/
#define APPNAME_FALLTHROUGH  [[fallthrough]]    /**< Indicates that the fall through from the previous case label is intentional and should not be diagnosed by a compiler that warns on fallthrough */

/**********************************
 * Context informations
 *********************************/
#define APPNAME_FILE            __FILE__
#define APPNAME_LINE            __LINE__
#define APPNAME_FCTNAME         __func__

#define APPNAME_FCTSIG          Q_FUNC_INFO

/**********************************
 * Variables attributes
 *********************************/
#define APPNAME_VAR_MAYBE_UNUSED    [[maybe_unused]]
#define APPNAME_VAR_UNUSED          APPNAME_VAR_MAYBE_UNUSED

/**********************************
 * Classes behaviours
 *********************************/
#define APPNAME_DISABLE_COPY(Class) \
    Q_DISABLE_COPY(Class)

#define APPNAME_DISABLE_MOVE(Class) \
    Q_DISABLE_MOVE(Class)

#define APPNAME_DISABLE_COPY_MOVE(Class) \
    Q_DISABLE_COPY_MOVE(Class)

/**********************************
 * Qt Compatibility workaround
 *********************************/

 #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
#   define APPNAME_QTCOMPAT_VARIANT_TYPE(var)    (var.type())
#else
#   define APPNAME_QTCOMPAT_VARIANT_TYPE(var)    (var.metaType())
#endif

#if QT_VERSION < QT_VERSION_CHECK(6, 4, 0)
#   define APPNAME_QTCOMPAT_STR_VIEW const QString&
#else
#   define APPNAME_QTCOMPAT_STR_VIEW QAnyStringView
#endif

/*!
 * \endcond
 */

#endif // APPNAME_GLOBAL_H